[{"/Users/rhyanvargas/repos/white-elephant-simplified/src/index.js":"1","/Users/rhyanvargas/repos/white-elephant-simplified/src/App.js":"2","/Users/rhyanvargas/repos/white-elephant-simplified/src/MockData.js":"3","/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/index.js":"4","/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/GiftList.js":"5","/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/PanelComponent.js":"6","/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/Header.js":"7","/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/PlayersList.js":"8","/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/ActionBar.js":"9","/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/Button.js":"10","/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/GiftCard.js":"11","/Users/rhyanvargas/repos/white-elephant-simplified/src/Login/index.js":"12","/Users/rhyanvargas/repos/white-elephant-simplified/src/GameSummary/index.js":"13"},{"size":146,"mtime":1610567158564,"results":"14","hashOfConfig":"15"},{"size":843,"mtime":1611280050579,"results":"16","hashOfConfig":"15"},{"size":4381,"mtime":1611264881144,"results":"17","hashOfConfig":"15"},{"size":6829,"mtime":1611278524529,"results":"18","hashOfConfig":"15"},{"size":1189,"mtime":1611278556558,"results":"19","hashOfConfig":"15"},{"size":234,"mtime":1611278268300,"results":"20","hashOfConfig":"15"},{"size":752,"mtime":1611278259527,"results":"21","hashOfConfig":"15"},{"size":1582,"mtime":1611278273651,"results":"22","hashOfConfig":"15"},{"size":1128,"mtime":1611278236580,"results":"23","hashOfConfig":"15"},{"size":458,"mtime":1611278254717,"results":"24","hashOfConfig":"15"},{"size":709,"mtime":1611278244781,"results":"25","hashOfConfig":"15"},{"size":570,"mtime":1611280456917,"results":"26","hashOfConfig":"15"},{"size":144,"mtime":1611279940153,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"19impyg",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rhyanvargas/repos/white-elephant-simplified/src/index.js",[],["58","59"],"/Users/rhyanvargas/repos/white-elephant-simplified/src/App.js",[],"/Users/rhyanvargas/repos/white-elephant-simplified/src/MockData.js",[],"/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/index.js",["60","61"],"import React, { useState, useEffect } from \"react\";\nimport GiftList from \"./GiftList\";\nimport PanelComponent from \"./PanelComponent\";\nimport \"../App.css\";\nimport { PLAYERS, SAMPLE_GIFTS } from \"../MockData\";\nimport PlayersList from \"./PlayersList\";\nimport ActionBar from \"./ActionBar\";\nimport Header from \"./Header\";\nimport Button from \"./Button\";\n\nexport default function GamePage() {\n  // STATE\n  const intialState = [];\n\n  const [animation, setAnimation] = useState({\n    slideIn: false,\n    slideUp: false,\n  });\n  const [gifts, setGifts] = useState(SAMPLE_GIFTS);\n  const [players, setPlayers] = useState(intialState);\n  const [playerUp, setPlayerUp] = useState({});\n  const [isGameStarted, setGameStart] = useState(false);\n  const [isGameEnded, setGameEnded] = useState(false);\n  const [selectedGift, setSelectedGift] = useState({});\n  const [isActive, setIsActive] = useState(false);\n  const [isHiddenGift, setHiddenGift] = useState({}); //REFACTOR: this handles hiding the stolen gift to prevent next player from picking the gift that was stolen from them\n  // HOOKS\n  useEffect(() => {\n    setPlayerUp(players.length > 0 ? players[0] : {});\n    isAllGiftsTaken();\n  }, [players]);\n\n  useEffect(() => {\n    setIsActive(false);\n  }, [playerUp]);\n\n  // UTILITY FUNCTIONS\n\n  const displayGameEndAlert = () => {\n    return window.confirm(\n      \"All gifts have been taken! Click 'OK' to end the game, otherwise click 'Cancel', so you can steal another gift ;)\"\n    );\n  };\n\n  const isAllGiftsTaken = () => {\n    let everyGiftHasOwner = gifts.every((gift) => gift.currentHolder != null);\n\n    if (everyGiftHasOwner) {\n      console.log(\"Gifts All Taken!\", everyGiftHasOwner);\n\n      if (displayGameEndAlert()) setGameEnded(true);\n    } else {\n      console.log(\"Keep Playing...NOT all gifts taken\", everyGiftHasOwner);\n    }\n  };\n\n  const confirmActionMessage = (nameOfAction) => {\n    // nameOfAction is a String\n    return window.confirm(\n      `Are you sure you want to ${nameOfAction} this gift?`\n    );\n  };\n\n  const randomSort = (players) => {\n    return players.sort(() => Math.random() - 0.5);\n  };\n\n  const reset = () => {\n    setPlayers(intialState);\n    setGameEnded(false);\n  };\n  const startGame = (players) => {\n    setPlayers(randomSort(players));\n    setGameStart(true);\n  };\n\n  const nextPlayer = () => {\n    setPlayers((prevPlayers) => {\n      const newArr = [...prevPlayers];\n\n      newArr.push(newArr.shift());\n\n      return newArr;\n    });\n\n    setSelectedGift({});\n  };\n\n  const toggleAnimation = () => {\n    setAnimation((prevState) => {\n      return {\n        ...prevState,\n        slideIn: !prevState.slideIn,\n      };\n    });\n  };\n\n  //  RENDER FUNCTIONS\n\n  // HANDLER FUNCTIONS\n  const handleSelectGift = (giftId) => {\n    const foundGift = gifts.find((gift) => gift.id === giftId);\n    setSelectedGift(foundGift);\n    setIsActive((prevState) => true);\n  };\n\n  const handleOpenGiftClick = (player, giftToOpen) => {\n    if (confirmActionMessage(\"open\")) {\n      setGifts((prevGifts) => {\n        const newGifts = [];\n\n        prevGifts.forEach((gift) => {\n          let updatedGift = gift;\n          if (giftToOpen.id === gift.id) {\n            updatedGift = { ...gift, currentHolder: player.name };\n          }\n          newGifts.push(updatedGift);\n        });\n        return newGifts;\n      });\n\n      setPlayers((prevPlayers) => {\n        let newPlayers = [];\n\n        players.forEach((currPlayer) => {\n          let updatedPlayer = currPlayer;\n          if (player.id === currPlayer.id) {\n            updatedPlayer = { ...currPlayer, currentGift: giftToOpen.id };\n          }\n\n          newPlayers.push(updatedPlayer);\n        });\n\n        return newPlayers;\n      });\n\n      setHiddenGift({});\n      nextPlayer();\n    }\n  };\n\n  const handleStealGiftClick = (currPlayer, giftToSteal) => {\n    const alertMessage = `${giftToSteal.name} has been stolen 3 times! This gift belongs to ${currPlayer.name}`;\n    let newPlayers = [];\n    let firstPlayer;\n    let lastPlayer;\n    let newGifts = [];\n    let updatedGift = {};\n\n    if (confirmActionMessage(\"steal\")) {\n      players.forEach((prevPlayer) => {\n        // Update Players properties\n        if (currPlayer.id === prevPlayer.id)\n          lastPlayer = {\n            ...prevPlayer,\n            currentGift: giftToSteal.id,\n          };\n        else if (giftToSteal.currentHolder === prevPlayer.name)\n          firstPlayer = {\n            ...prevPlayer,\n            currentGift: null,\n          };\n        else newPlayers.push(prevPlayer);\n      });\n\n      // Update Gift currentHolder\n      gifts.forEach((gift) => {\n        if (giftToSteal.id === gift.id) {\n          updatedGift = {\n            ...gift,\n            currentHolder: currPlayer.name,\n            steals: ++gift.steals,\n          };\n          newGifts.push(updatedGift);\n          setHiddenGift(updatedGift);\n        } else newGifts.push(gift);\n      });\n\n      // Push players to newPlayers array\n      newPlayers.unshift(firstPlayer);\n      newPlayers.push(lastPlayer);\n\n      setPlayers(newPlayers);\n      setGifts(newGifts);\n    } // END OF IF\n\n    if (giftToSteal.steals === 3) alert(alertMessage);\n  };\n\n  // JSX ELEMENTS\n  const app = (\n    <main>\n      <div className=\"container\">\n        <Header />\n\n        <GiftList\n          playerUp={playerUp}\n          gifts={gifts}\n          handleSelectGift={handleSelectGift}\n          selectedGift={selectedGift}\n          isActive={isActive}\n          isHiddenGift={isHiddenGift}\n          isGameEnded={isGameEnded}\n        ></GiftList>\n        <ActionBar\n          playerUp={playerUp}\n          selectedGift={selectedGift}\n          isActive={isActive}\n          handleOpenGiftClick={handleOpenGiftClick}\n          handleStealGiftClick={handleStealGiftClick}\n        />\n      </div>\n\n      <PanelComponent animation={animation}>\n        <Button toggleAnimation={toggleAnimation} animation={animation} />\n        <PlayersList\n          players={players}\n          setPlayers={setPlayers}\n          isGameStarted={isGameStarted}\n          gifts={gifts}\n        />\n      </PanelComponent>\n    </main>\n  );\n\n  /* TODO: Setup Router to /start-game */\n  const startGameScreen = (\n    <section>\n      <div className=\"container flex center--x\">\n        <button className=\"button-primary\" onClick={() => startGame(PLAYERS)}>\n          Play Game\n        </button>\n      </div>\n    </section>\n  );\n\n  /* TODO: Setup Router to /game-end */\n  const gameEndScreen = (\n    <section>\n      <div className=\"container flex center--x\">\n        <h1>THE GAME HAS ENDED!</h1>\n      </div>\n    </section>\n  );\n\n  const showGameBoard = () => {\n    if (isGameStarted && !isGameEnded) {\n      return app;\n    } else if (isGameEnded) {\n      return gameEndScreen;\n    } else {\n      return startGameScreen;\n    }\n  };\n  return <>{showGameBoard()}</>;\n}\n","/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/GiftList.js",["62"],"import React from \"react\";\nimport GiftCard from \"./GiftCard\";\n\nexport default function GiftList({\n  gifts,\n  playerUp,\n  handleSelectGift,\n  selectedGift,\n  isActive,\n  isHiddenGift,\n}) {\n  const { name } = playerUp;\n\n  const displayGiftCard = (gift) => {\n    return (\n      <GiftCard\n        key={gift.id}\n        gift={gift}\n        handleSelectGift={handleSelectGift}\n        selectedGift={selectedGift}\n        isActive={isActive}\n      />\n    );\n  };\n\n  const isGiftAvailable = (currPlayer, currGift) =>\n    ((currGift.ownerId !== currPlayer.id || currGift.ownerId) &&\n      currGift.steals) < 3 && currGift.id !== isHiddenGift.id\n      ? true\n      : false;\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"grid-header\">\n          {name ? (\n            <div>\n              <h1>Up Now: {name}</h1>\n              <h2>Pick Your Gift:</h2>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n\n        <div className=\"grid-container\">\n          {gifts.map((gift) => {\n            if (isGiftAvailable(playerUp, gift)) {\n              return displayGiftCard(gift);\n            }\n          })}\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/PanelComponent.js",[],"/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/Header.js",[],"/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/PlayersList.js",["63"],"import React from \"react\";\n\nexport default function PlayersList({ players, isGameStarted, gifts }) {\n  const renderPlayerList = () => {\n    const playerList = players.map((player, index) => {\n      if (player.currentGift === null) {\n        return (\n          <div className=\"player-card\" key={`${player.id}-${index}`}>\n            <h2>{player.name}</h2>\n          </div>\n        );\n      }\n      if (player.currentGift) {\n        let gift = gifts.find((currGift) => player.currentGift === currGift.id);\n        return (\n          <div\n            className=\"player-card flex center--y start\"\n            key={`${player.id}-${index}`}\n          >\n            <div className=\"player-card-image-wrapper\">\n              <img\n                className=\"player-card-image\"\n                src={gift.image}\n                alt={gift.name}\n              />\n            </div>\n            <div className=\"player-card-info-wrapper flex vertical left\">\n              <h3>{player.name}</h3>\n              <p className=\"player-card-title\">{gift.name}</p>\n              <p className=\"player-card-info\">\n                {/* <small>current: {gift.currentHolder} | </small> */}\n                <small>steals: {gift.steals}</small>\n              </p>\n            </div>\n          </div>\n        );\n      } else {\n      }\n    });\n    return playerList;\n  };\n  return (\n    <section>\n      <div className=\"container players-container \">\n        <div className=\"players-wrapper flex vertical start\">\n          {isGameStarted ? renderPlayerList() : \"\"}\n        </div>\n      </div>\n    </section>\n  );\n}\n","/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/ActionBar.js",[],"/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/Button.js",[],"/Users/rhyanvargas/repos/white-elephant-simplified/src/GamePage/GiftCard.js",[],"/Users/rhyanvargas/repos/white-elephant-simplified/src/Login/index.js",["64","65"],"/Users/rhyanvargas/repos/white-elephant-simplified/src/GameSummary/index.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":31,"column":6,"nodeType":"72","endLine":31,"endColumn":15,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":68,"column":9,"nodeType":"76","messageId":"77","endLine":68,"endColumn":14},{"ruleId":"78","severity":1,"message":"79","line":47,"column":29,"nodeType":"80","messageId":"81","endLine":47,"endColumn":31},{"ruleId":"78","severity":1,"message":"79","line":5,"column":52,"nodeType":"80","messageId":"81","endLine":5,"endColumn":54},{"ruleId":"82","severity":1,"message":"83","line":20,"column":11,"nodeType":"84","endLine":20,"endColumn":23},{"ruleId":"82","severity":1,"message":"83","line":23,"column":11,"nodeType":"84","endLine":23,"endColumn":23},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isAllGiftsTaken'. Either include it or remove the dependency array.","ArrayExpression",["87"],"no-unused-vars","'reset' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [isAllGiftsTaken, players]",{"range":"90","text":"91"},[1178,1187],"[isAllGiftsTaken, players]"]